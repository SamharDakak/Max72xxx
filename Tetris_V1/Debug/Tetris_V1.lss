
Tetris_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001636  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f8  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001053  00000000  00000000  00002292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  000032e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000669  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d96  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000496b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  9e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initSPI>:
   writeByte(0x00);      // Send the value
  }

 SLAVE_DESELECT;
 /* startISR();*/
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	84 b9       	out	0x04, r24	; 4
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	84 b9       	out	0x04, r24	; 4
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8c bd       	out	0x2c, r24	; 44
  ca:	08 95       	ret

000000cc <writeByte>:
  cc:	8e bd       	out	0x2e, r24	; 46
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <writeByte+0x2>
  d4:	08 95       	ret

000000d6 <initMatrix>:
  d6:	cf 93       	push	r28
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	85 b9       	out	0x05, r24	; 5
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <initMatrix+0x1a>
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	c2 30       	cpi	r28, 0x02	; 2
  f2:	b8 f3       	brcs	.-18     	; 0xe2 <initMatrix+0xc>
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	85 b9       	out	0x05, r24	; 5
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <initMatrix+0x3c>
 104:	8b e0       	ldi	r24, 0x0B	; 11
 106:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 110:	cf 5f       	subi	r28, 0xFF	; 255
 112:	c2 30       	cpi	r28, 0x02	; 2
 114:	b8 f3       	brcs	.-18     	; 0x104 <initMatrix+0x2e>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	85 b9       	out	0x05, r24	; 5
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	07 c0       	rjmp	.+14     	; 0x134 <initMatrix+0x5e>
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	c2 30       	cpi	r28, 0x02	; 2
 136:	b8 f3       	brcs	.-18     	; 0x126 <initMatrix+0x50>
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	85 b9       	out	0x05, r24	; 5
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	07 c0       	rjmp	.+14     	; 0x156 <initMatrix+0x80>
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	c2 30       	cpi	r28, 0x02	; 2
 158:	b8 f3       	brcs	.-18     	; 0x148 <initMatrix+0x72>
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	85 b9       	out	0x05, r24	; 5
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <clearMatrix>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	d1 e0       	ldi	r29, 0x01	; 1
 16a:	12 c0       	rjmp	.+36     	; 0x190 <clearMatrix+0x2c>
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	85 b9       	out	0x05, r24	; 5
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	07 c0       	rjmp	.+14     	; 0x184 <clearMatrix+0x20>
 176:	8d 2f       	mov	r24, r29
 178:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 66 00 	call	0xcc	; 0xcc <writeByte>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c2 30       	cpi	r28, 0x02	; 2
 186:	b8 f3       	brcs	.-18     	; 0x176 <clearMatrix+0x12>
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	df 5f       	subi	r29, 0xFF	; 255
 190:	d9 30       	cpi	r29, 0x09	; 9
 192:	60 f3       	brcs	.-40     	; 0x16c <clearMatrix+0x8>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <main>:



int main(void)
{
	initSPI();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <initSPI>
	initMatrix();
 19e:	0e 94 6b 00 	call	0xd6	; 0xd6 <initMatrix>
	clearMatrix();
 1a2:	0e 94 b2 00 	call	0x164	; 0x164 <clearMatrix>
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0xc>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
