
Max72xx_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800100  00800100  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000247d  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  00002991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f44  00000000  00000000  0000323b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00004180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a0  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9a  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000666e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000068 <Hindrance>:
  68:	00 00 00 00 00 3c 42 81                             .....<B.

00000070 <car>:
  70:	00 00 00 3c 24 e7 ff 42                             ...<$..B

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a0 34       	cpi	r26, 0x40	; 64
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 81 01 	call	0x302	; 0x302 <main>
  98:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <initSPI>:
		pushBuffer(pgm_read_byte(&Hindrance[0][i]));   // Push the byte from the characters array to the display buffer
		
		// and delay
	}
	displayBuffer();
}
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	84 b9       	out	0x04, r24	; 4
  b8:	8c b5       	in	r24, 0x2c	; 44
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	8c bd       	out	0x2c, r24	; 44
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	08 95       	ret

000000c6 <Uart_init>:
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  d8:	08 95       	ret

000000da <writeByte>:
  da:	8e bd       	out	0x2e, r24	; 46
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <writeByte+0x2>
  e2:	08 95       	ret

000000e4 <writeWord>:
  e4:	cf 93       	push	r28
  e6:	c6 2f       	mov	r28, r22
  e8:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <initMatrix>:
  f6:	cf 93       	push	r28
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <initMatrix+0x1a>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 10e:	cf 5f       	subi	r28, 0xFF	; 255
 110:	c8 30       	cpi	r28, 0x08	; 8
 112:	b8 f3       	brcs	.-18     	; 0x102 <initMatrix+0xc>
 114:	85 b1       	in	r24, 0x05	; 5
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 b9       	out	0x05, r24	; 5
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 b9       	out	0x05, r24	; 5
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	07 c0       	rjmp	.+14     	; 0x132 <initMatrix+0x3c>
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 130:	cf 5f       	subi	r28, 0xFF	; 255
 132:	c8 30       	cpi	r28, 0x08	; 8
 134:	b8 f3       	brcs	.-18     	; 0x124 <initMatrix+0x2e>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	85 b9       	out	0x05, r24	; 5
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	07 c0       	rjmp	.+14     	; 0x154 <initMatrix+0x5e>
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 152:	cf 5f       	subi	r28, 0xFF	; 255
 154:	c8 30       	cpi	r28, 0x08	; 8
 156:	b8 f3       	brcs	.-18     	; 0x146 <initMatrix+0x50>
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	85 b9       	out	0x05, r24	; 5
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	07 c0       	rjmp	.+14     	; 0x176 <initMatrix+0x80>
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 174:	cf 5f       	subi	r28, 0xFF	; 255
 176:	c8 30       	cpi	r28, 0x08	; 8
 178:	b8 f3       	brcs	.-18     	; 0x168 <initMatrix+0x72>
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	85 b9       	out	0x05, r24	; 5
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <clearMatrix>:
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	d1 e0       	ldi	r29, 0x01	; 1
 18a:	12 c0       	rjmp	.+36     	; 0x1b0 <clearMatrix+0x2c>
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	85 b9       	out	0x05, r24	; 5
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <clearMatrix+0x20>
 196:	8d 2f       	mov	r24, r29
 198:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 6d 00 	call	0xda	; 0xda <writeByte>
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
 1a4:	c8 30       	cpi	r28, 0x08	; 8
 1a6:	b8 f3       	brcs	.-18     	; 0x196 <clearMatrix+0x12>
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	df 5f       	subi	r29, 0xFF	; 255
 1b0:	d9 30       	cpi	r29, 0x09	; 9
 1b2:	60 f3       	brcs	.-40     	; 0x18c <clearMatrix+0x8>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <initBuffer>:
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <initBuffer+0x10>
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	10 82       	st	Z, r1
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 34       	cpi	r24, 0x40	; 64
 1cc:	c0 f3       	brcs	.-16     	; 0x1be <initBuffer+0x4>
 1ce:	08 95       	ret

000001d0 <pushBuffer_hindrnace>:
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <pushBuffer_hindrnace+0x1a>
 1d4:	29 2f       	mov	r18, r25
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	ef 5f       	subi	r30, 0xFF	; 255
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	40 81       	ld	r20, Z
 1e0:	f9 01       	movw	r30, r18
 1e2:	e0 50       	subi	r30, 0x00	; 0
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	40 83       	st	Z, r20
 1e8:	9f 5f       	subi	r25, 0xFF	; 255
 1ea:	9f 33       	cpi	r25, 0x3F	; 63
 1ec:	98 f3       	brcs	.-26     	; 0x1d4 <pushBuffer_hindrnace+0x4>
 1ee:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <__DATA_REGION_ORIGIN__+0x3f>
 1f2:	08 95       	ret

000001f4 <displayBuffer>:
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	2e c0       	rjmp	.+92     	; 0x25a <displayBuffer+0x66>
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	8b 7f       	andi	r24, 0xFB	; 251
 202:	85 b9       	out	0x05, r24	; 5
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	05 c0       	rjmp	.+10     	; 0x212 <displayBuffer+0x1e>
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 72 00 	call	0xe4	; 0xe4 <writeWord>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	cd 17       	cp	r28, r29
 214:	c8 f3       	brcs	.-14     	; 0x208 <displayBuffer+0x14>
 216:	ed 2f       	mov	r30, r29
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e1 0f       	add	r30, r17
 228:	f1 1d       	adc	r31, r1
 22a:	e1 50       	subi	r30, 0x01	; 1
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	60 81       	ld	r22, Z
 230:	81 2f       	mov	r24, r17
 232:	0e 94 72 00 	call	0xe4	; 0xe4 <writeWord>
 236:	c7 e0       	ldi	r28, 0x07	; 7
 238:	05 c0       	rjmp	.+10     	; 0x244 <displayBuffer+0x50>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeWord>
 242:	c1 50       	subi	r28, 0x01	; 1
 244:	dc 17       	cp	r29, r28
 246:	c8 f3       	brcs	.-14     	; 0x23a <displayBuffer+0x46>
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	1f 5f       	subi	r17, 0xFF	; 255
 250:	01 c0       	rjmp	.+2      	; 0x254 <displayBuffer+0x60>
 252:	11 e0       	ldi	r17, 0x01	; 1
 254:	19 30       	cpi	r17, 0x09	; 9
 256:	98 f2       	brcs	.-90     	; 0x1fe <displayBuffer+0xa>
 258:	df 5f       	subi	r29, 0xFF	; 255
 25a:	d8 30       	cpi	r29, 0x08	; 8
 25c:	d0 f3       	brcs	.-12     	; 0x252 <displayBuffer+0x5e>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	08 95       	ret

00000266 <pushCharacter_Hindrance>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	d8 2f       	mov	r29, r24
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <pushCharacter_Hindrance+0x3c>
 270:	ed 2f       	mov	r30, r29
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ec 0f       	add	r30, r28
 282:	f1 1d       	adc	r31, r1
 284:	e8 59       	subi	r30, 0x98	; 152
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	84 91       	lpm	r24, Z
 28a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <pushBuffer_hindrnace>
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	95 e0       	ldi	r25, 0x05	; 5
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <pushCharacter_Hindrance+0x2e>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <pushCharacter_Hindrance+0x38>
 29e:	00 00       	nop
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
 2a2:	c8 30       	cpi	r28, 0x08	; 8
 2a4:	28 f3       	brcs	.-54     	; 0x270 <pushCharacter_Hindrance+0xa>
 2a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <displayBuffer>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <pushCharacter_DISTANCE>:
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <pushBuffer_hindrnace>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	95 e0       	ldi	r25, 0x05	; 5
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <pushCharacter_DISTANCE+0xc>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <pushCharacter_DISTANCE+0x16>
 2c6:	00 00       	nop
 2c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <displayBuffer>
 2cc:	08 95       	ret

000002ce <car_car>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <car_car+0x28>
 2d8:	85 b1       	in	r24, 0x05	; 5
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	85 b9       	out	0x05, r24	; 5
 2de:	fe 01       	movw	r30, r28
 2e0:	e0 59       	subi	r30, 0x90	; 144
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	64 91       	lpm	r22, Z
 2e6:	8c 2f       	mov	r24, r28
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	0e 94 72 00 	call	0xe4	; 0xe4 <writeWord>
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	21 96       	adiw	r28, 0x01	; 1
 2f6:	c8 30       	cpi	r28, 0x08	; 8
 2f8:	d1 05       	cpc	r29, r1
 2fa:	74 f3       	brlt	.-36     	; 0x2d8 <car_car+0xa>
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <main>:
int main(void)
{
	// Inits
	
	
	initSPI();
 302:	0e 94 50 00 	call	0xa0	; 0xa0 <initSPI>
	initMatrix();
 306:	0e 94 7b 00 	call	0xf6	; 0xf6 <initMatrix>
	clearMatrix();
 30a:	0e 94 c2 00 	call	0x184	; 0x184 <clearMatrix>
	initBuffer();
 30e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <initBuffer>
     Uart_init();
 312:	0e 94 63 00 	call	0xc6	; 0xc6 <Uart_init>
	while (1)
	{
/*setstopwatch();*/

		/*displayMessage(messagePointer, messageSize);*/	// Display the message*/
car_car();
 316:	0e 94 67 01 	call	0x2ce	; 0x2ce <car_car>
pushCharacter_DISTANCE();
 31a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pushCharacter_DISTANCE>
pushCharacter_Hindrance(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 33 01 	call	0x266	; 0x266 <pushCharacter_Hindrance>
 324:	f8 cf       	rjmp	.-16     	; 0x316 <main+0x14>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
